{# core import #}
{% import 'scarfinity/template/components/navigation/breadcrumbs.twig' as _breadcrumbs %}

{# current import #}
{% import 'scarfinity/template/components/product-card/product-card.twig' as productCard %}
{% import 'scarfinity/template/components/review.twig' as _review %}
{% import 'scarfinity/template/components/category-product-card.twig' as _categoryProductCard %}

{# utility import #}
{% import 'scarfinity/template/components/utility/nav-tab.twig' as _navTab %}
{% import 'scarfinity/template/components/utility/unique-offer.twig' as _uniqueOffer %}
{% import 'scarfinity/template/components/utility/_icons.twig' as _icons %}

{# init #}
{% set currentUrl = (breadcrumbs|last).href %}

{# code #}
{{ header }}
{{ _breadcrumbs.Breadcrumbs({ breadcrumbs: breadcrumbs }) }}
<div class="container">
  <div class="row">
    <div class="col-md-12 col-sm-no-padding">
      <div class="product-card" id="product">
        {{ 
          productCard.productCard({
            'product_id': product_id,
            'headingTitle': heading_title,
            'price': price,
            'special': special,
            'thumb': thumb,
            images: images,
            'shortDescription': description|striptags|slice(0, 240),
            'productMinQuantity': minimum,
            'addCartLabel': button_cart,
            'rating': rating,
            'reviews': reviews,
            reviewsHref: 'product-card-tab-view-tab-review',
            reviewsLink: currentUrl ~ '#a-product-card-tab-view-tab-review',
            descriptionHref: 'product-card-tab-view-tab-description',
            descriptionLink: currentUrl ~ '#a-product-card-tab-view-tab-description',
            wishList: button_wishlist,
            options: options,
            share: share,
            tags: tags,
            discounts: discounts
          }) 
        }}
      </div>
    </div>
  </div>
  <div class="row product-card__review">
    <div class="col-md-4 col-sm-no-padding">
      {{ column_right['modules']['product-card-unique'] }}
    </div>
    <div class="col-md-8 col-sm-no-padding product-card__review__review">
      {% set tabAttributeContent %}
        <ul class="info-list">
          {% for attribute_group in attribute_groups %}
            {% for attribute in attribute_group.attribute %}
              <li>
                <span>{{attribute.name}}</span>
                <span>{{attribute.text}}</span>
              </li>
            {% endfor %}
          {% endfor %}
        </ul>
      {% endset %}
      {{
        _navTab.NavTab({
          id: 'product-card-tab-view',
          tabs: [
            { id: 'tab-attribute', title: tab_attribute, content: tabAttributeContent },
            { id: 'tab-description', title: tab_description, content: description },
            { id: 'tab-review', title: tab_review, content: _review.ReviewsContainer() },
          ]
        })
      }}
    </div>
  </div>  
  <br />
  <h3>{{ text_related }}</h3>
  <div class="row product-card-catalog-row">
    {% for product in products %}
      <div class="product-card-catalog-container col-xs-6 col-sm-3 col-md-5ths">
        {{ _categoryProductCard.CategoryProductCard(product) }}
      </div>
    {% endfor %}
  </div>
</div>


<script type="text/javascript">
  var product = {
    product_id: "{{product_id}}",
    price: {
      origin: '{{ price_origin }}',
      base: '{{ price }}',
      special: '{{ special }}'
    }
  }

  var product_id = "{{product_id}}";
  var product_qunatity_container = $('#cart-quantity');

  function fillProductOptions() {
    var options = $('#product .ctr-utt');

    _.forEach(options, function(option) {
      var optionInfo = $(option).find('input[type="hidden"]');
      var qInput = $(option).find('input[name$="quantity"]');
      var quantity = sCart.getProductQuantity(product_id, [{
        product_option_id: optionInfo.attr('name'),
        product_option_value_id: optionInfo.val()
      }]);

      qInput.data('tmp-value', quantity);
      qInput.val(quantity).trigger("change");
    });

    product_qunatity_container.text(sCart.getProductQuantity(product.product_id));
  }

  function updateCurrentPrice() {
    var currency = $('#product .utility__currency');
    var price = sCart.getProductPrice(product_id);
    var value = currency.find('.utility__currency__value');

    if(price != '') {
      value.text(price);
    } else {
      if(sCart.getSubTotalOrigin() >= 5000) {
        value.text(product.price['origin']);  
      } else {
        value.text(product.price['base']);
      }
    }
  }

  sCart.addEventListener('afterload', function() {
    fillProductOptions();
    updateCurrentPrice();
    $('#product .product-card-core').removeClass('process');
  });

  function setProductsQuantity() {
    var options = $('#product .ctr-utt');
    _.forEach(options, function(option) {
      var optionInfo = $(option).find('input[type="hidden"]');
      var qInput = $(option).find('input[name$="quantity"]');
      var oldValue = qInput.data('tmp-value');
      var newValue = parseInt(qInput.val());
      qInput.data('tmp-value', newValue);

      if(oldValue != newValue) {
        sCart.set(product_id, qInput.val(), [{
          product_option_id: optionInfo.attr('name'),
          product_option_value_id: optionInfo.val()
        }]);
      }
    });
  }

  var pcTimeout = null;

  $('.ctr-utt button').on('click', function(e) {
      var name = e.target.name;
      var parent = $(this).parent().parent();
      var input = parent.find('input[name="quantity"]');
      input.val(Math.max(0, parseInt(input.val()) + (name == 'inc' ? 1 : -1))).trigger('change');
  });

  $('.ctr-utt input[name$=quantity]').on('change paste keyup', function(e) {
    var input = $(this);
    var parent = input.parent().parent();
    var option = parent.find('input[type="hidden"]');
    var newValue = parseInt(input.val());
    var oldValue = parseInt(input.data('tmp-value'));

    if(newValue > 0) {
      parent.addClass('in-cart');
    } else {
      parent.removeClass('in-cart');
    }

    if(oldValue !== newValue) {
      input.val(newValue);
      clearTimeout(pcTimeout);
      pcTimeout = setTimeout(function() {
        clearTimeout(pcTimeout);
        $('#product .product-card-core').addClass('process');
        setProductsQuantity();
      }, 800);
    }
  });


  fillProductOptions();
  updateCurrentPrice();
  $('#product .product-card-core').removeClass('process');

</script>


<script type="text/javascript"><!--
$('#review').delegate('.pagination a', 'click', function(e) {
    e.preventDefault();

    $('#review').fadeOut('slow');

    $('#review').load(this.href);

    $('#review').fadeIn('slow');
});

$('#review').load('index.php?route=product/product/review&product_id={{ product_id }}');

$('#button-review').on('click', function() {
	$.ajax({
		url: 'index.php?route=product/product/write&product_id={{ product_id }}',
		type: 'post',
		dataType: 'json',
		data: $("#form-review").serialize(),
		beforeSend: function() {
			$('#button-review').button('loading');
		},
		complete: function() {
			$('#button-review').button('reset');
		},
		success: function(json) {
			$('.alert-dismissible').remove();

			if (json['error']) {
				$('#leave-conatiner-leave-message').html('<div class="alert alert-danger alert-dismissible"><i class="fa fa-exclamation-circle"></i> ' + json['error'] + '</div>');
			}

			if (json['success']) {
				$('#leave-conatiner-leave-message').html('<div class="alert alert-success alert-dismissible"><i class="fa fa-check-circle"></i> ' + json['success'] + '</div>');

				$('input[name=\'name\']').val('');
				$('textarea[name=\'text\']').val('');
				$('input[name=\'rating\']:checked').prop('checked', false);
			}
		}
	});
});

$(document).ready(function() {
	$('#p_card-i_gallery-swiper').magnificPopup({
		type:'image',
		delegate: 'a',
		gallery: {
			enabled: true
		},
    mainClass: 'mfp-with-zoom', // this class is for CSS animation below
    zoom: {
      enabled: true, // By default it's false, so don't forget to enable it

      duration: 300, // duration of the effect, in milliseconds
      easing: 'ease-in-out', // CSS transition easing function

      // The "opener" function should return the element from which popup will be zoomed in
      // and to which popup will be scaled down
      // By defailt it looks for an image tag:
      opener: function(openerElement) {
        // openerElement is the element on which popup was initialized, in this case its <a> tag
        // you don't need to add "opener" option if this code matches your needs, it's defailt one.
        return openerElement.is('img') ? openerElement : openerElement.find('img');
      }
    }
	});
});
//--></script> 
{{ footer }}
